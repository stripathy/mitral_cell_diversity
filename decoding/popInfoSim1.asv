%% generate a bunch of different stims
slen = 200;

numSignals= 100;

cnt = 1;
outSignal = zeros(slen, numSignals);
for j = 1:numSignals
    outSignal(:,j) = getNoisyStim(slen, 1, 3);
end

cholMat = chol(stimCovMat);
outSignal = zeros(slen, numSignals);
for j = 1:numSignals
    outSignal(:,j) = cholMat*randn(slen,1);
end


%% for every cell in my pop, stimulate each with every stim with x repeats

load 'C:\Users\Shreejoy\Desktop\shreejoy\neural_diversity\ST_machinelearn\reconKP\LNP_recons_drugs5.mat';
load 'C:\Users\Shreejoy\Desktop\shreejoy\neural_diversity\ST_machinelearn\reconKP\decoding\alphaStimCovMat';
keepCells = [1 2 7 11 8 14 3 13 12 6 15 5]; 
keepCells = fliplr(keepCells);


numModels = length(keepCells);

for i = 1:numModels
    cellModels(i) = ggAll(keepCells(i));
end

numSimRepeats = 10;
slen = 200;
testInterval = [0 slen];
maxSpikes = 40;
stimCovMat = stimCovMat(1:slen, 1:slen);

tic
clear simRates
parfor j = 1:numSignals*numModels
    modelInd = floor(min(j,numSignals)/numSignals) + 1;
    estSpikes = zeros(maxSpikes, numSimRepeats);
    for i = 1:numSimRepeats
        [tspEst] = simGLM(cellModels(modelInd), outSignal(:,mod(j-1,numSignals)+1));
        estSpikes(1:length(tspEst),i) = tspEst; 
    end
    [simSpikes(j).dat] = getSpikesInt(estSpikes, testInterval);
    
end
time1 = toc;

%% construct pops from cell-spike responses and decode pop spike trains

clear pop;
for i = 1:numModels
    pop(i).dat = [i];
end
for i = 1:numModels
    pop(length(pop)+1).dat = [i, i];
end
for i = 1:numModels
    pop(length(pop)+1).dat = [i, i, i, i, i];
end

numPops = length(pop);

cnt = 1;
for i = 1:length(pop)
    
    currCells = pop(i).dat;
    popModels = cellModels(currCells);
    for j = 1:numSignals
        
        cellStimInd = j + (currCells(1)-1)*numSignals;
        randTrials = randsample(numSimRepeats, length(currCells));
        
        currPopInd = j + (i-1)*numSignals;
        reconStructIn(currPopInd).testSpikes = simSpikes(cellStimInd).dat(:,randTrials);
        reconStructIn(currPopInd).id = i;
        reconStructIn(currPopInd).popMakeup = currCells;
    end
end

stimInterval = [0 slen];
dtStim = 1;


parfor i = 1201:3600%length(reconStruct)
    initStim = outSignal(:,mod(i-1,numSignals)+1);
    currPop = cellModels(reconStructIn(i).popMakeup);
    testSpikes = reconStructIn(i).testSpikes;
    
    [optStim, exitflag, likeli, hessian] = bayesStimDecoder1(currPop, testSpikes, stimInterval, dtStim, stimCovMat, initStim);
    
    reconStructOut(i).optStim = optStim;
    reconStructOut(i).exitflag = exitflag;
    reconStructOut(i).likeli = likeli;
    reconStructOut(i).hessian = hessian;
end

 
stimEnt = .5*log2(det(stimCovMat));
for i = 1:numPops
    for j = 1:numSignals
        inputStim = outSignal(:,j);
        reconStim = reconStructOut(j+(i-1)*numSignals).optStim;
        tempInfos(j) =  reconInfo(inputStim,  reconStim);
    end
    info(i) = mean(tempInfos);
end

a = reshape(totalEnt, 12,3);
 
% .5*slen*log2(2*pi*exp(1))
stimEnt = .5*log2(det(stimCovMat)) + .5*slen*log2(2*pi*exp(1));
for i = 1:numPops
    hessDetSample = zeros(1, numSignals);
    for j = 1:numSignals
        hessDetSample(j) = det(reconStructOut(j+(i-1)*numSignals).hessian);
    end
    respEnt(i) = mean(-.5*log2(hessDetSample)) + .5*slen*log2(2*pi*exp(1));
end

totalEnt = stimEnt - respEnt;
    
colorInds = ['bgr'];
rasterColorInds(1:5) = colorInds(1);
rasterColorInds(6:10) = colorInds(2);
rasterColorInds(11:15) = colorInds(3);

%% plot some recons and spike trains

colorInds = ['bgr'];
rasterColorInds(1) = colorInds(1);
rasterColorInds(2:3) = colorInds(2);
rasterColorInds(4:9) = colorInds(3);

myCellInd = 7;

currCellInd = find(keepCells == myCellInd);
% currCellInd = 3;
currStimInd = randi(100,1);

figure; subplot(3,1,1:2); plot(1:slen, outSignal(:,currStimInd), 'k', 'LineWidth' , 2)
% axis([1 slen -3 3]);

plotInds = numSignals*numModels*[0:2] + currStimInd + numSignals*(currCellInd-1);
testSpikesPlot = [];
hold on;
for i =1:3
    subplot(3,1,1:2); plot(1:slen, reconStructOut(plotInds(i)).optStim, colorInds(i), 'LineWidth' , 2)
    testSpikesPlot = vectCat(testSpikesPlot, reconStructIn(plotInds(i)).testSpikes);
end
% legend('real stim', 'same recon1', 'same recon2','diff recon');
ylabel('stimulus value (zscore)');
subplot(3,1,3);createRaster2(testSpikesPlot',1, slen, rasterColorInds); ylabel('Neuron ID');
xlabel('time (ms)');   

